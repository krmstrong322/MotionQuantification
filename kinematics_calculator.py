import pandas as pd
import numpy as np
import argparse
import os
from typing import List, Tuple, Dict


def calculate_angle(a: np.ndarray, b: np.ndarray, c: np.ndarray) -> float:
    """
    Calculate the angle between three points in 3D space.
    The angle is calculated at point b.
    """
    # Convert to numpy arrays if not already
    a = np.array(a)
    b = np.array(b)
    c = np.array(c)
    
    # Calculate vectors
    ba = a - b
    bc = c - b
    
    # Calculate cosine of angle using dot product
    cosine_angle = np.dot(ba, bc) / (np.linalg.norm(ba) * np.linalg.norm(bc))
    angle = np.arccos(np.clip(cosine_angle, -1.0, 1.0))
    
    # Convert to degrees
    angle = np.degrees(angle)
    
    return angle


def parse_pose_csv(csv_file: str) -> pd.DataFrame:
    """
    Parse the CSV file generated by the pose estimation script.
    Returns a DataFrame with all landmark coordinates.
    """
    # Read the CSV file
    df = pd.DataFrame()
    try:
        df = pd.read_csv(csv_file)
    except Exception as e:
        print(f"Error reading CSV file: {e}")
        return None
    
    return df


def extract_landmark_coordinates(df: pd.DataFrame) -> Dict[int, List[Tuple[float, float, float]]]:
    """
    Extract coordinates for each landmark from all frames.
    Returns a dictionary mapping frame_index -> list of landmark coordinates.
    """
    frames_data = {}
    
    for frame_idx, row in df.iterrows():
        landmarks = []
        
        # For each of the 33 landmarks
        for i in range(33):
            x = row[f"landmark_{i}_x"]
            y = row[f"landmark_{i}_y"]
            z = row[f"landmark_{i}_z"]
            landmarks.append((x, y, z))
        
        frames_data[frame_idx] = landmarks
    
    return frames_data


def calculate_kinematics(frames_data: Dict[int, List[Tuple[float, float, float]]]) -> pd.DataFrame:
    """
    Calculate clinically relevant kinematics from the landmark data.
    Returns a DataFrame with all calculated kinematics.
    """
    # Define the landmark indices for various joints
    # MediaPipe pose landmarks reference: https://mediapipe.dev/images/mobile/pose_tracking_full_body_landmarks.png
    landmarks = {
        # Left side
        "left_shoulder": 11,
        "left_elbow": 13,
        "left_wrist": 15,
        "left_hip": 23,
        "left_knee": 25,
        "left_ankle": 27,
        # Right side
        "right_shoulder": 12,
        "right_elbow": 14,
        "right_wrist": 16,
        "right_hip": 24,
        "right_knee": 26,
        "right_ankle": 28,
        # Central points
        "nose": 0,
        "neck": 33,  # Not directly in MediaPipe, we'll calculate it
        "left_ear": 7,
        "right_ear": 8,
    }
    
    # Initialize a dictionary to store the kinematics data
    kinematics_data = {
        # Joint angles
        "left_knee_angle": [],
        "right_knee_angle": [],
        "left_hip_angle": [],
        "right_hip_angle": [],
        "left_ankle_angle": [],
        "right_ankle_angle": [],
        "left_shoulder_angle": [],
        "right_shoulder_angle": [],
        "left_elbow_angle": [],
        "right_elbow_angle": [],
        # Trunk angles
        "trunk_flexion": [],
        "trunk_lateral_flexion": [],
        # Neck angles
        "neck_flexion": [],
        "neck_lateral_flexion": [],
        # Symmetry metrics
        "knee_angle_symmetry": [],
        "hip_angle_symmetry": [],
        "shoulder_angle_symmetry": []
    }
    
    # Process each frame
    for frame_idx, landmarks_list in frames_data.items():
        # Create a function to get coordinates for a landmark
        def get_landmark(idx):
            if idx == 33:  # Calculate neck position as midpoint between shoulders
                left_shoulder = np.array(landmarks_list[landmarks["left_shoulder"]])
                right_shoulder = np.array(landmarks_list[landmarks["right_shoulder"]])
                return (left_shoulder + right_shoulder) / 2
            else:
                return np.array(landmarks_list[idx])
        
        # Calculate joint angles
        
        # Knee angles (extension/flexion)
        left_knee_angle = calculate_angle(
            get_landmark(landmarks["left_hip"]), 
            get_landmark(landmarks["left_knee"]), 
            get_landmark(landmarks["left_ankle"])
        )
        right_knee_angle = calculate_angle(
            get_landmark(landmarks["right_hip"]), 
            get_landmark(landmarks["right_knee"]), 
            get_landmark(landmarks["right_ankle"])
        )
        
        # Hip angles (extension/flexion)
        # Use torso as reference (approximate with a vertical line from hip)
        left_hip_vertical = get_landmark(landmarks["left_hip"]) + np.array([0, -1, 0])
        right_hip_vertical = get_landmark(landmarks["right_hip"]) + np.array([0, -1, 0])
        
        left_hip_angle = calculate_angle(
            left_hip_vertical, 
            get_landmark(landmarks["left_hip"]), 
            get_landmark(landmarks["left_knee"])
        )
        right_hip_angle = calculate_angle(
            right_hip_vertical, 
            get_landmark(landmarks["right_hip"]), 
            get_landmark(landmarks["right_knee"])
        )
        
        # Ankle angles (dorsiflexion/plantarflexion)
        # Approximate with a horizontal line from ankle
        left_ankle_horizontal = get_landmark(landmarks["left_ankle"]) + np.array([1, 0, 0])
        right_ankle_horizontal = get_landmark(landmarks["right_ankle"]) + np.array([1, 0, 0])
        
        left_ankle_angle = calculate_angle(
            get_landmark(landmarks["left_knee"]),
            get_landmark(landmarks["left_ankle"]),
            left_ankle_horizontal
        )
        right_ankle_angle = calculate_angle(
            get_landmark(landmarks["right_knee"]),
            get_landmark(landmarks["right_ankle"]),
            right_ankle_horizontal
        )
        
        # Shoulder angles (flexion/extension)
        left_shoulder_vertical = get_landmark(landmarks["left_shoulder"]) + np.array([0, -1, 0])
        right_shoulder_vertical = get_landmark(landmarks["right_shoulder"]) + np.array([0, -1, 0])
        
        left_shoulder_angle = calculate_angle(
            left_shoulder_vertical,
            get_landmark(landmarks["left_shoulder"]),
            get_landmark(landmarks["left_elbow"])
        )
        right_shoulder_angle = calculate_angle(
            right_shoulder_vertical,
            get_landmark(landmarks["right_shoulder"]),
            get_landmark(landmarks["right_elbow"])
        )
        
        # Elbow angles (extension/flexion)
        left_elbow_angle = calculate_angle(
            get_landmark(landmarks["left_shoulder"]),
            get_landmark(landmarks["left_elbow"]),
            get_landmark(landmarks["left_wrist"])
        )
        right_elbow_angle = calculate_angle(
            get_landmark(landmarks["right_shoulder"]),
            get_landmark(landmarks["right_elbow"]),
            get_landmark(landmarks["right_wrist"])
        )
        
        # Trunk flexion (forward/backward lean)
        left_hip = get_landmark(landmarks["left_hip"])
        right_hip = get_landmark(landmarks["right_hip"])
        hip_center = (left_hip + right_hip) / 2
        
        left_shoulder = get_landmark(landmarks["left_shoulder"])
        right_shoulder = get_landmark(landmarks["right_shoulder"])
        shoulder_center = (left_shoulder + right_shoulder) / 2
        
        # Create a vertical line from hip center
        hip_vertical = hip_center + np.array([0, -1, 0])
        
        trunk_flexion = calculate_angle(
            hip_vertical,
            hip_center,
            shoulder_center
        )
        
        # Trunk lateral flexion (side bend)
        # Create a line from left hip to right hip
        hip_line = right_hip - left_hip
        # Create a perpendicular line (up) from the hip line
        hip_up = np.cross(hip_line, np.array([0, 0, 1]))
        hip_up = hip_up / np.linalg.norm(hip_up)
        
        # Line from hip center to shoulder center
        hip_to_shoulder = shoulder_center - hip_center
        
        # Project hip_to_shoulder onto the frontal plane
        frontal_plane_normal = np.array([0, 0, 1])
        hip_to_shoulder_frontal = hip_to_shoulder - np.dot(hip_to_shoulder, frontal_plane_normal) * frontal_plane_normal
        
        # Calculate the angle between hip_up and hip_to_shoulder_frontal
        trunk_lateral_flexion = np.degrees(np.arccos(
            np.clip(np.dot(hip_up, hip_to_shoulder_frontal) / np.linalg.norm(hip_to_shoulder_frontal), -1.0, 1.0)
        ))
        
        # Neck angles
        neck = get_landmark(landmarks["neck"])
        nose = get_landmark(landmarks["nose"])
        
        # Neck flexion
        neck_vertical = neck + np.array([0, -1, 0])
        neck_flexion = calculate_angle(
            neck_vertical,
            neck,
            nose
        )
        
        # Neck lateral flexion
        left_ear = get_landmark(landmarks["left_ear"])
        right_ear = get_landmark(landmarks["right_ear"])
        ear_center = (left_ear + right_ear) / 2
        
        # Create a vector from neck to ear center
        neck_to_ear = ear_center - neck
        
        # Project neck_to_ear onto the frontal plane
        neck_to_ear_frontal = neck_to_ear - np.dot(neck_to_ear, frontal_plane_normal) * frontal_plane_normal
        
        # Calculate the angle between vertical and neck_to_ear_frontal
        neck_lateral_flexion = np.degrees(np.arccos(
            np.clip(np.dot(np.array([0, -1, 0]), neck_to_ear_frontal) / np.linalg.norm(neck_to_ear_frontal), -1.0, 1.0)
        ))
        
        # Calculate symmetry metrics (absolute difference between left and right)
        knee_angle_symmetry = abs(left_knee_angle - right_knee_angle)
        hip_angle_symmetry = abs(left_hip_angle - right_hip_angle)
        shoulder_angle_symmetry = abs(left_shoulder_angle - right_shoulder_angle)
        
        # Store the calculated kinematics
        kinematics_data["left_knee_angle"].append(left_knee_angle)
        kinematics_data["right_knee_angle"].append(right_knee_angle)
        kinematics_data["left_hip_angle"].append(left_hip_angle)
        kinematics_data["right_hip_angle"].append(right_hip_angle)
        kinematics_data["left_ankle_angle"].append(left_ankle_angle)
        kinematics_data["right_ankle_angle"].append(right_ankle_angle)
        kinematics_data["left_shoulder_angle"].append(left_shoulder_angle)
        kinematics_data["right_shoulder_angle"].append(right_shoulder_angle)
        kinematics_data["left_elbow_angle"].append(left_elbow_angle)
        kinematics_data["right_elbow_angle"].append(right_elbow_angle)
        kinematics_data["trunk_flexion"].append(trunk_flexion)
        kinematics_data["trunk_lateral_flexion"].append(trunk_lateral_flexion)
        kinematics_data["neck_flexion"].append(neck_flexion)
        kinematics_data["neck_lateral_flexion"].append(neck_lateral_flexion)
        kinematics_data["knee_angle_symmetry"].append(knee_angle_symmetry)
        kinematics_data["hip_angle_symmetry"].append(hip_angle_symmetry)
        kinematics_data["shoulder_angle_symmetry"].append(shoulder_angle_symmetry)
    
    # Create a DataFrame from the kinematics data
    kinematics_df = pd.DataFrame(kinematics_data)
    
    # Add a frame index column
    kinematics_df.insert(0, "frame", list(frames_data.keys()))
    
    return kinematics_df


def main():
    # Parse command line arguments
    parser = argparse.ArgumentParser(description="Calculate clinical kinematics from pose data")
    parser.add_argument("input_csv", help="Path to the input CSV file containing pose data")
    parser.add_argument("--output", "-o", help="Path to the output CSV file (default: 'clinical_kinematics.csv')", 
                        default="clinical_kinematics.csv")
    args = parser.parse_args()
    
    # Parse the input CSV file
    pose_df = parse_pose_csv(args.input_csv)
    if pose_df is None:
        return
    
    # Extract landmark coordinates
    frames_data = extract_landmark_coordinates(pose_df)
    
    # Calculate kinematics
    kinematics_df = calculate_kinematics(frames_data)
    
    # Save the kinematics data to a CSV file
    try:
        kinematics_df.to_csv(args.output, index=False)
        print(f"Clinical kinematics data saved to {args.output}")
    except Exception as e:
        print(f"Error saving kinematics data: {e}")


if __name__ == "__main__":
    main()